TITLE: Installing and Running Project Locally
DESCRIPTION: Command sequence for setting up the project environment locally, including installing dependencies with pnpm and starting the development server.
SOURCE: https://github.com/OpenRouterTeam/tool-calling/blob/main/README.md#2025-04-15_snippet_0

LANGUAGE: bash
CODE:
pnpm install
pnpm dev

TITLE: Basic Text Generation Example
DESCRIPTION: Example showing how to generate text using OpenRouter with GPT-4 model
SOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/README.md#2025-04-15_snippet_2

LANGUAGE: typescript
CODE:
import { openrouter } from '@openrouter/ai-sdk-provider';
import { generateText } from 'ai';

const { text } = await generateText({
  model: openrouter('openai/gpt-4o'),
  prompt: 'Write a vegetarian lasagna recipe for 4 people.',
});

----------------------------------------

TITLE: Installing OpenRouter Provider Package
DESCRIPTION: Package installation commands for different Node.js package managers including pnpm, npm, and yarn
SOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/README.md#2025-04-15_snippet_0

LANGUAGE: bash
CODE:
# For pnpm
pnpm add @openrouter/ai-sdk-provider

# For npm
npm install @openrouter/ai-sdk-provider

# For yarn
yarn add @openrouter/ai-sdk-provider

----------------------------------------

TITLE: Configuring Provider Options
DESCRIPTION: Example of passing extra configuration options via providerOptions property
SOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/README.md#2025-04-15_snippet_3

LANGUAGE: typescript
CODE:
import { createOpenRouter } from '@openrouter/ai-sdk-provider';
import { streamText } from 'ai';

const openrouter = createOpenRouter({ apiKey: 'your-api-key' });
const model = openrouter('anthropic/claude-3.7-sonnet:thinking');
await streamText({
  model,
  messages: [{ role: 'user', content: 'Hello' }],
  providerOptions: {
    openrouter: {
      reasoning: {
        max_tokens: 10,
      },
    },
  },
});

----------------------------------------

TITLE: Importing OpenRouter Provider
DESCRIPTION: Basic import statement for the default OpenRouter provider instance
SOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/README.md#2025-04-15_snippet_1

LANGUAGE: typescript
CODE:
import { openrouter } from '@openrouter/ai-sdk-provider';

----------------------------------------

TITLE: Model Settings Configuration
DESCRIPTION: Example of configuring extra body parameters in model settings
SOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/README.md#2025-04-15_snippet_4

LANGUAGE: typescript
CODE:
import { createOpenRouter } from '@openrouter/ai-sdk-provider';
import { streamText } from 'ai';

const openrouter = createOpenRouter({ apiKey: 'your-api-key' });
const model = openrouter('anthropic/claude-3.7-sonnet:thinking', {
  extraBody: {
    reasoning: {
      max_tokens: 10,
    },
  },
});
await streamText({
  model,
  messages: [{ role: 'user', content: 'Hello' }],
});

----------------------------------------

TITLE: Factory Configuration
DESCRIPTION: Example of configuring extra body parameters in the model factory
SOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/README.md#2025-04-15_snippet_5

LANGUAGE: typescript
CODE:
import { createOpenRouter } from '@openrouter/ai-sdk-provider';
import { streamText } from 'ai';

const openrouter = createOpenRouter({
  apiKey: 'your-api-key',
  extraBody: {
    reasoning: {
      max_tokens: 10,
    },
  },
});
const model = openrouter('anthropic/claude-3.7-sonnet:thinking');
await streamText({
  model,
  messages: [{ role: 'user', content: 'Hello' }],
});

----------------------------------------

TITLE: Anthropic Prompt Caching Configuration
DESCRIPTION: Example of using Anthropic-specific caching options in message configuration
SOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/README.md#2025-04-15_snippet_6

LANGUAGE: typescript
CODE:
import { createOpenRouter } from '@openrouter/ai-sdk-provider';
import { streamText } from 'ai';

const openrouter = createOpenRouter({ apiKey: 'your-api-key' });
const model = openrouter('anthropic/<supported-caching-model>');

await streamText({
  model,
  messages: [
    {
      role: 'system',
      content: 'You are a helpful assistant.',
      providerMetadata: {
        openrouter: {
          cacheControl: { type: 'ephemeral' },
        },
      },
    },
    {
      role: 'user',
      content: 'Hello, how are you?',
    },
  ],
});

----------------------------------------

TITLE: Markdown Changelog Entries
DESCRIPTION: Records version history including additions of Anthropic cache control and fixes for type compatibility with AI SDK v3.4.33.
SOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/CHANGELOG.md#2025-04-15_snippet_0

LANGUAGE: markdown
CODE:
# Changelog

## [0.4.2]

### Added

- Anthropic cache control

## [Unreleased]

### Fixed

- Fixed type compatibility with ai SDK v3.4.33 by properly exporting LanguageModelV1 interface types

TITLE: Adding New Model Configuration
DESCRIPTION: Python code example showing how to add new models to the DEFAULT_CONTAINER_TYPES dictionary.
SOURCE: https://github.com/OpenRouterTeam/openrouter-runner/blob/main/README.md#2025-04-15_snippet_4

LANGUAGE: python
CODE:
DEFAULT_CONTAINER_TYPES = {
    "Intel/neural-chat-7b-v3-1": ContainerType.VllmContainer_7B,
    "mistralai/Mistral-7B-Instruct-v0.2": ContainerType.VllmContainer_7B,
    ...
}

----------------------------------------

TITLE: Deploying OpenRouter Runner to Modal
DESCRIPTION: Command to deploy the OpenRouter Runner to Modal for production use, packaging configurations and models into a live application.
SOURCE: https://github.com/OpenRouterTeam/openrouter-runner/blob/main/README.md#2025-04-15_snippet_12

LANGUAGE: shell
CODE:
modal deploy runner

----------------------------------------

TITLE: Downloading and Deploying Models
DESCRIPTION: Commands for downloading models and deploying the runner application.
SOURCE: https://github.com/OpenRouterTeam/openrouter-runner/blob/main/README.md#2025-04-15_snippet_3

LANGUAGE: shell
CODE:
modal run runner::download
modal deploy runner

----------------------------------------

TITLE: Configuring Modal Secret Keys
DESCRIPTION: Commands for setting up various secret keys including HuggingFace token, Runner API key, Sentry and Datadog configurations.
SOURCE: https://github.com/OpenRouterTeam/openrouter-runner/blob/main/README.md#2025-04-15_snippet_2

LANGUAGE: shell
CODE:
modal secret create huggingface HUGGINGFACE_TOKEN=<your huggingface token>
modal secret create ext-api-key RUNNER_API_KEY=<generate a random key>
modal secret create sentry SENTRY_DSN=<optional SENTRY_DSN>
modal secret create datadog DD_API_KEY=<optional DD_API_KEY> DD_SITE=<site name>

----------------------------------------

TITLE: Creating Environment Variables File for OpenRouter Runner
DESCRIPTION: Structure of the .env.dev file needed to configure OpenRouter Runner with the API endpoint, runner API key, and target model.
SOURCE: https://github.com/OpenRouterTeam/openrouter-runner/blob/main/README.md#2025-04-15_snippet_5

LANGUAGE: plaintext
CODE:
API_URL=<MODAL_API_ENDPOINT_THAT_WAS_DEPLOYED>
RUNNER_API_KEY=<CUSTOM_KEY_YOU_CREATED_EARLIER>
MODEL=<MODEL_YOU_ADDED_OR_WANT_TO_TEST>

----------------------------------------

TITLE: Creating and Configuring Modal Development Environment
DESCRIPTION: Commands for creating and setting up a development environment in Modal.
SOURCE: https://github.com/OpenRouterTeam/openrouter-runner/blob/main/README.md#2025-04-15_snippet_1

LANGUAGE: shell
CODE:
modal environment create dev
modal config set-environment dev

----------------------------------------

TITLE: Setting Up Poetry Environment and Modal Token
DESCRIPTION: Commands for installing dependencies with Poetry and configuring Modal authentication token.
SOURCE: https://github.com/OpenRouterTeam/openrouter-runner/blob/main/README.md#2025-04-15_snippet_0

LANGUAGE: shell
CODE:
poetry install
poetry shell
modal token new

----------------------------------------

TITLE: Running a Test Script for Model Testing
DESCRIPTION: Command to execute a test script with a specific model identifier, using pnpm to run a TypeScript test file.
SOURCE: https://github.com/OpenRouterTeam/openrouter-runner/blob/main/README.md#2025-04-15_snippet_10

LANGUAGE: shell
CODE:
pnpm x scripts/test-simple.ts YourModel/Identifier

----------------------------------------

TITLE: Starting OpenRouter Runner Server
DESCRIPTION: Command to start the OpenRouter Runner server using Modal, which keeps the app running for testing.
SOURCE: https://github.com/OpenRouterTeam/openrouter-runner/blob/main/README.md#2025-04-15_snippet_7

LANGUAGE: shell
CODE:
modal serve runner

----------------------------------------

TITLE: Example JSON Response from Model Testing
DESCRIPTION: Sample JSON output from a model test showing generated text and token usage statistics.
SOURCE: https://github.com/OpenRouterTeam/openrouter-runner/blob/main/README.md#2025-04-15_snippet_11

LANGUAGE: json
CODE:
{
  "text": "Project A119 was a top-secret program run by the United States government... U.S. nuclear and military policies.",
  "prompt_tokens": 23,
  "completion_tokens": 770,
  "done": true
}

----------------------------------------

TITLE: Installing Dependencies for OpenRouter Runner
DESCRIPTION: Command to install required Node.js dependencies using npm or pnpm package managers.
SOURCE: https://github.com/OpenRouterTeam/openrouter-runner/blob/main/README.md#2025-04-15_snippet_6

LANGUAGE: shell
CODE:
npm install
# or
pnpm install

----------------------------------------

TITLE: Loading Environment Variables
DESCRIPTION: Command to load environment variables from the .env.dev file to make them available for testing.
SOURCE: https://github.com/OpenRouterTeam/openrouter-runner/blob/main/README.md#2025-04-15_snippet_9

LANGUAGE: shell
CODE:
source .env.dev

----------------------------------------

TITLE: Navigating to Project Root
DESCRIPTION: Command to navigate to the root directory of the OpenRouter Runner project for testing.
SOURCE: https://github.com/OpenRouterTeam/openrouter-runner/blob/main/README.md#2025-04-15_snippet_8

LANGUAGE: shell
CODE:
cd path/to/openrouter-runner

----------------------------------------

TITLE: RDF Metadata for Down and Out in the Magic Kingdom
DESCRIPTION: Machine-readable RDF/XML metadata describing the book's title, author, description, and Creative Commons licensing terms
SOURCE: https://github.com/OpenRouterTeam/openrouter-runner/blob/main/scripts/0.txt#2025-04-15_snippet_0

LANGUAGE: XML
CODE:
<rdf:RDF xmlns="http://web.resource.org/cc/"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<Work rdf:about="http://craphound.com/down">
<dc:title>Down and Out in the Magic Kingdom</dc:title>
<dc:date>2003-1-9</dc:date>
<dc:description>A novel by Cory Doctorow...</dc:description>
<dc:creator><Agent>
<dc:title>Cory Doctorow</dc:title>
</Agent></dc:creator>
<dc:rights><Agent>
<dc:title>Cory Doctorow</dc:title>
</Agent></dc:rights>
<dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
<license rdf:resource="http://creativecommons.org/licenses/by-nd-nc/1.0" />
</Work>

<License rdf:about="http://creativecommons.org/licenses/by-nd-nc/1.0">
<requires rdf:resource="http://web.resource.org/cc/Attribution" />
<permits rdf:resource="http://web.resource.org/cc/Reproduction" />
<permits rdf:resource="http://web.resource.org/cc/Distribution" />
<prohibits rdf:resource="http://web.resource.org/cc/CommercialUse" />
<requires rdf:resource="http://web.resource.org/cc/Notice" />
</License>
</rdf:RDF>